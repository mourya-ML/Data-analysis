# -*- coding: utf-8 -*-
"""Predictive Analytics Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WQxXRraKG9nk4sQKU9RK88O7AZWuhIAJ
"""

import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

path = "/content/drive/MyDrive/Final Project/claims_data_consolidated.csv"
df = pd.read_csv(path, encoding= 'unicode_escape')

#pd.set_option('display.max_columns', None)
#pd.set_option('display.max_rows', None)
#pd.set_option('display.expand_frame_repr', False)
#pd.set_option('max_colwidth', -1)

df.head()

#print(df.head(5).to_csv("test.csv"))

df.columns

df.index

type(df)

df.shape

df.dtypes

cols=df.select_dtypes(exclude='int').columns.to_list()
df[cols]=df[cols].astype('category')

df['Timeofaccident_0'] =  pd.to_datetime(df['Timeofaccident_0'], format='%Y-%m-%d %H:%M:%S')

df['day'] = pd.to_datetime(df['Timeofaccident_0']).dt.day
df['month'] = pd.to_datetime(df['Timeofaccident_0']).dt.month
df['year'] = pd.to_datetime(df['Timeofaccident_0']).dt.year
df['Timeoftheday'] = pd.to_datetime(df['Timeofaccident_0']).dt.hour

df['Timeoftheday'] = ((df['Timeoftheday']) % 24 + 4) // 4
df['Timeoftheday'].replace({1: 'Late Night',
                      2: 'Early Morning',
                      3: 'Morning',
                      4: 'Noon',
                      5: 'Evening',
                      6: 'Night'}, inplace=True)

df.describe(include= 'all')

df.tail()

#Removing columns that are not needed for analysis
newdf = df.drop(['PolicyNumber_0',
                 'InsuredFirstname_0',
              'InsuredLastName_0',
              'CustomerId_0',
              'Address1_0',
              'Phoneno_0',
              'Timeofaccident_0',
              'ClaimRegistrationNumber_0',
              'Claimssettlementnumber_0',
              'Notifiedby_0',
              'RegistrationNumber_0',
              'Enginenumber_0',
              'Chassisnumber_0',
              'DriverName_0',
              'Licensenumber_0',
              'FIRno_0',
              'Cheqno_0',
              'SurveyorName_0',
              'ThirdPartyClaimant_0',
              'Advocatename_0',
              'Advocateid_0',
              'HistoryClaimNumber_0'],
             axis = 1)

newdf.head()

newdf.shape

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

cols2=newdf.select_dtypes(include='category').columns.to_list()

for x in cols2:
  newdf[x] = le.fit_transform(newdf[x])

newdf['Timeoftheday'] = le.fit_transform(newdf['Timeoftheday'])

newdf.head()

newdf1 = newdf.pop('PossibleFraud')
newdf['PossibleFraud'] = newdf1

newdf.head()

x= newdf.iloc[:,:-1].values
y= newdf.iloc[:,-1].values

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.33) #66% and 33%

#Gaussian Naive Bayes classifier using Sklearn
from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
gnb.fit(x_train,y_train)

y_pred_test = gnb.predict(x_test)

from sklearn.metrics import accuracy_score
acc1 = accuracy_score(y_test,y_pred_test)
acc1



#Logistic Regression using Sklearn
from sklearn.linear_model import LogisticRegression
logreg = LogisticRegression(solver = 'lbfgs',multi_class='auto')
logreg.fit(x_train,y_train)

y_pred2 = logreg.predict(x_test)

acc2 = accuracy_score(y_test,y_pred2)
acc2

importance = logreg.coef_[0]

from matplotlib import pyplot
# summarize feature importance
for i,v in enumerate(importance):
	print('Feature: %0d, Score: %.5f' % (i,v))
# plot feature importance
pyplot.bar([x for x in range(len(importance))], importance)
pyplot.show()

#Decision tree classifier using sklearn
from sklearn.tree import DecisionTreeClassifier
dt = DecisionTreeClassifier()
dt.fit(x_train,y_train)

y_pred3 = dt.predict(x_test)

acc3 = accuracy_score(y_test,y_pred3)
acc3

dt.feature_importances_

#KNN (k-nearest neighbors) classifier using Sklearn
from sklearn.neighbors import KNeighborsClassifier
clf = KNeighborsClassifier(n_neighbors=3,algorithm='ball_tree')

clf.fit(x_train,y_train)

y_pred4 = clf.predict(x_test)
acc4 =   accuracy_score(y_test,y_pred4)
acc4

#Support Vector Machine using Sklearn
#from sklearn.svm import SVC
#svc1 = SVC(C=50,kernel='rbf',gamma=1)

#svc1.fit(x_train,y_train)

#y_pred4 = svc1.predict(x_test)

#from sklearn.metrics import accuracy_score
#acc4=accuracy_score(y_test,y_pred4)
#acc4



